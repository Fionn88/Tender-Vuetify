{"ast":null,"code":"import \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.keys.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from \"axios\";\nexport default {\n  inject: [\"reload\"],\n  data: function data() {\n    return {\n      certificates: this.$store.state.certificates\n    };\n  },\n  methods: {\n    refresh: function refresh() {\n      this.reload();\n    },\n    insertCertificate: function insertCertificate() {\n      var _this = this;\n\n      Object.keys(this.certificates).filter(function (k, i) {\n        return i >= 100 && i < 300;\n      }).forEach(function (k) {\n        return console.log(_this.certificates[k]);\n      });\n      console.log(\"addCertificate\");\n      console.log(\"certificates: \" + this.certificates);\n      console.log(this.certificates);\n      var self = this;\n      axios.post(\"http://127.0.0.1:3000/createCertificateMuti\", {\n        data: this.certificates\n      }).then(function (response) {\n        console.log(\"resp: \" + response);\n        console.log(response);\n        self.$emit(\"close\");\n        var currentState = this.$store.certificates;\n        var newState = Object.assign(currentState, {\n          certificates: []\n        });\n        self.$store.replaceState(newState);\n        self.reload();\n      })[\"catch\"](function (err) {\n        console.log(\"err\");\n        console.log(err);\n      }); // 使用多重迴圈的方式，已棄用\n      // for (\n      //   let index = 0;\n      //   index < Object.keys(this.certificates).length ;\n      //   ++index\n      // ) {\n      //   const element = this.certificates[index];\n      //   console.log(\"element: \"+element);\n      //   console.log(element);\n      //   console.log(element);\n      // console.log(element.tendersID)\n      //   axios.post(\"http://127.0.0.1:3000/createCertificate\", {\n      // tenderid: element.tendersID,\n      // accountCode: element.code,\n      // account: element.account,\n      // name: element.name,\n      // currency: element.accountCurrecy,\n      // branch: element.branchName,\n      // amount: element.amount,\n      //   })\n      //   .then(function (response) {\n      //     console.log(\"resp: \"+response)\n      //     console.log(response)\n      //   }).catch(err => {\n      //     console.log(\"err\")\n      //     console.log(err);\n      //   })\n      // }\n    },\n    closeTheDialog: function closeTheDialog() {\n      this.$emit(\"close\");\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA;AACA;AACAA,oBADA;AAGAC,MAHA,kBAGA;AACA;AACAC;AADA;AAGA,GAPA;AAQAC;AACAC,WADA,qBACA;AACA;AACA,KAHA;AAIAC,qBAJA,+BAIA;AAAA;;AACAC,qCACAC,MADA,CACA;AAAA;AAAA,OADA,EAEAC,OAFA,CAEA;AAAA;AAAA,OAFA;AAIAC;AACAA;AACAA;AACA;AAEAC,YACAC,IADA,CACA,6CADA,EACA;AACAV;AADA,OADA,EAIAW,IAJA,CAIA;AACAH;AACAA;AACAI;AAEA;AACA;AACAX;AADA;AAIAW;AACAA;AACA,OAhBA,WAiBA;AACAJ;AACAA;AACA,OApBA,EAVA,CAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAjEA;AAkEAK,kBAlEA,4BAkEA;AACA;AACA;AApEA;AARA","names":["inject","data","certificates","methods","refresh","insertCertificate","Object","filter","forEach","console","axios","post","then","self","closeTheDialog"],"sourceRoot":"src/components/TenderDetail/Dialog","sources":["DialogSureApply.vue"],"sourcesContent":["<template>\n  <v-dialog :value=\"true\" persistent max-width=\"290\">\n    <v-card>\n      <v-card-title class=\"text-h5\"> 確定 </v-card-title>\n      <v-card-text\n        >確定繳交押標金 {{ this.$route.query.amount }} 元嗎？\n        {{ this.$route.query.amount }} 將會在您的帳戶凍結</v-card-text\n      >\n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <v-btn color=\"green darken-1\" text @click=\"$emit('close')\"> No </v-btn>\n\n        <!-- ------------------------------------------------------------- -->\n        <!-- call API To Bank -->\n        <v-btn color=\"green darken-1\" text @click=\"insertCertificate\">\n          Yes\n        </v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n</template>\n\n<script>\nimport axios from \"axios\";\nexport default {\n  inject: [\"reload\"],\n\n  data() {\n    return {\n      certificates: this.$store.state.certificates,\n    };\n  },\n  methods: {\n    refresh() {\n      this.reload();\n    },\n    insertCertificate() {\n      Object.keys(this.certificates)\n        .filter((k, i) => i >= 100 && i < 300)\n        .forEach((k) => console.log(this.certificates[k]));\n\n      console.log(\"addCertificate\");\n      console.log(\"certificates: \" + this.certificates);\n      console.log(this.certificates);\n      var self = this;\n\n      axios\n        .post(\"http://127.0.0.1:3000/createCertificateMuti\", {\n          data: this.certificates,\n        })\n        .then(function (response) {\n          console.log(\"resp: \" + response);\n          console.log(response);\n          self.$emit(\"close\");\n\n          var currentState = this.$store.certificates;\n          var newState = Object.assign(currentState, {\n            certificates: [],\n          });\n\n          self.$store.replaceState(newState);\n          self.reload();\n        })\n        .catch((err) => {\n          console.log(\"err\");\n          console.log(err);\n        });\n\n      // 使用多重迴圈的方式，已棄用\n      // for (\n      //   let index = 0;\n      //   index < Object.keys(this.certificates).length ;\n      //   ++index\n      // ) {\n      //   const element = this.certificates[index];\n      //   console.log(\"element: \"+element);\n      //   console.log(element);\n      //   console.log(element);\n      // console.log(element.tendersID)\n      //   axios.post(\"http://127.0.0.1:3000/createCertificate\", {\n      // tenderid: element.tendersID,\n      // accountCode: element.code,\n      // account: element.account,\n      // name: element.name,\n      // currency: element.accountCurrecy,\n      // branch: element.branchName,\n      // amount: element.amount,\n\n      //   })\n      //   .then(function (response) {\n      //     console.log(\"resp: \"+response)\n      //     console.log(response)\n      //   }).catch(err => {\n      //     console.log(\"err\")\n      //     console.log(err);\n      //   })\n      // }\n    },\n    closeTheDialog() {\n      this.$emit(\"close\");\n    },\n  },\n};\n</script>\n\n<style>\n</style>"]},"metadata":{},"sourceType":"module"}